generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// MODELS
//

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  role      GlobalRole @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  organizationMemberships OrganizationMember[]

  @@map("Users")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members OrganizationMember[]

  @@map("Organizations")
}

model OrganizationMember {
  id             String           @id @default(cuid())
  organizationId String
  userId         String
  role           OrgMemberRole    @default(MEMBER)
  status         MembershipStatus @default(PENDING)
  invitedAt      DateTime         @default(now())
  acceptedAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("OrganizationMembers")
}

//
// ENUMS
//

enum GlobalRole {
  ADMIN // App admin
  USER // Regular user
}

enum OrgMemberRole {
  ADMIN // Organization owner/admin
  CLIENT // Organization client
  MEMBER // Organization member
}

enum MembershipStatus {
  PENDING // Invited but not yet accepted
  ACCEPTED // Invitation accepted
  DECLINED // Invitation declined (optional)
  REMOVED // Membership removed (optional)
}
