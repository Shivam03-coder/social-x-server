generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  role      GlobalRole @default(ADMIN)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  organizationMembers OrganizationMember[]
  eventsAsTeamAdmin   Event[]              @relation("TeamAdminEvents")
  eventParticipations EventParticipant[]

  @@map("Users")
}

model Organization {
  id        String               @id @default(cuid())
  name      String
  slug      String               @unique
  adminId   String
  imageUrl  String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  members   OrganizationMember[]
  events    Event[]

  @@map("Organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  memberId       String
  member         User         @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([organizationId, memberId])
  @@map("OrganizationMembers")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  instagramId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teamAdminId String
  teamAdmin   User   @relation("TeamAdminEvents", fields: [teamAdminId], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  participants EventParticipant[]

  postId String? @unique
  post   Post?

  @@unique([organizationId, title])
  @@map("Events")
}

model EventParticipant {
  id        String          @id @default(cuid())
  role      ParticipantRole
  eventId   String
  event     Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([eventId, userId])
  @@map("EventParticipants")
}

model Post {
  id            String    @id @default(cuid())
  postScheduled DateTime?
  eventId       String?   @unique
  event         Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  textContent   String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("Posts")
}

enum GlobalRole {
  ADMIN
  CLIENT
  MEMBER
}

enum OrgMemberRole {
  ADMIN
  CLIENT
  MEMBER
}

enum MembershipStatus {
  PENDING
  ACCEPTED
}

enum ParticipantRole {
  CLIENT
  MEMBER
}
