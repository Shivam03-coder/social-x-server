generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  firstName     String?
  lastName      String?
  role          GlobalRole     @default(ADMIN)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  memberships   Member[]
  notifications Notification[]
  comments      Comment[]
  session       Session?
  Event         Event[]

  @@map("Users")
}

model Session {
  id         String   @id @default(uuid())
  sessionKey String   @unique
  expiresAt  DateTime

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  message   String   @default("default message")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Notifications")
}

model Client {
  id                String   @id @default(cuid())
  name              String
  email             String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isVerified        Boolean  @default(false)
  events            Event[]
  instagramId       String?
  instagramPassword String?

  @@map("Clients")
}

model Event {
  id          String   @id @default(cuid())
  title       String   @unique
  description String?
  additional  String?
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)

  participants Member[]

  post   Post?
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@map("Events")
}

model Member {
  id               String     @id @default(cuid())
  role             MemberRole @default(MEMBER)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  isInviteAccepted Boolean    @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade) // âœ… Member belongs to an Event

  @@map("Members")
}

model Post {
  id              String   @id @default(cuid())
  title           String
  hashtags        String
  description     String
  subtitle        String?
  additional      String?
  mediaUrl        String?
  isPublished     Boolean  @default(false)
  confirmByClient Boolean? @default(false)
  postType        PostType @default(POST)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  eventId String @unique
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  comments     Comment[]
  PostSchedule PostSchedule?

  @@map("Posts")
}

model PostSchedule {
  id               String           @id @default(cuid())
  postScheduleTime DateTime
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  postId           String           @unique
  post             Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  canBeScheduledBy PostScheduleRole @default(ADMIN)
}

model Comment {
  id          String     @id @default(cuid())
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId      String
  post        Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentedBy GlobalRole

  @@map("Comments")
}

enum GlobalRole {
  ADMIN
  CLIENT
  MEMBER
}

enum PostType {
  POST
  REEL
}

enum PostScheduleRole {
  ADMIN
  MEMBER
}

enum MembershipStatus {
  PENDING
  ACCEPTED
}

enum MemberRole {
  MEMBER
}
