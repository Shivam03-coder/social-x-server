generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  password          String
  firstName         String?
  lastName          String?
  role              GlobalRole     @default(ADMIN)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  eventsAsTeamAdmin Event[]        @relation("TeamAdminEvents")
  participant       Participant[]
  Notification      Notification[]
  Comments          Comment[]
  Token             Token[]

  @@map("Users")
}

model Token {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  message   String   @default("default message")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Notifications")
}

model Organization {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  adminId     String
  imageUrl    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  events      Event[]
  Post        Post[]
  participant Participant[]

  @@map("Organizations")
}

model Event {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  additional          String?
  startTime           DateTime
  endTime             DateTime
  instagramId         String?
  instagramIdPassword String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  teamAdminId         String
  teamAdmin           User     @relation("TeamAdminEvents", fields: [teamAdminId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  participants Participant[]

  post Post?

  @@unique([organizationId, title])
  @@map("Events")
}

model Participant {
  id               String          @id @default(cuid())
  role             ParticipantRole @default(MEMBER)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  isInviteAccepted Boolean         @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("Participants")
}

model Post {
  id              String   @id @default(cuid())
  title           String
  hashtags        String
  description     String
  subtitle        String?
  additional      String?
  mediaUrl        String?
  isPublished     Boolean  @default(false)
  confirmByClient Boolean? @default(false)
  postType        PostType @default(POST)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  PostSchedule PostSchedule?
  orgId        String
  organization Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  eventId      String        @unique
  event        Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Comments     Comment[]

  @@map("Posts")
}

model PostSchedule {
  id               String           @id @default(cuid())
  postScheduleTime DateTime
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  postId           String           @unique
  post             Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  canBeScheduledBy PostScheduleRole @default(ADMIN)
}

model Comment {
  id          String     @id @default(cuid())
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId      String
  post        Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentedBy GlobalRole

  @@map("Comments")
}

enum GlobalRole {
  ADMIN
  CLIENT
  MEMBER
}

enum PostType {
  POST
  REEL
}

enum PostScheduleRole {
  ADMIN
  MEMBER
}

enum MembershipStatus {
  PENDING
  ACCEPTED
}

enum ParticipantRole {
  CLIENT
  MEMBER
}
