generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  role      GlobalRole @default(ADMIN)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  organizationMembers OrganizationMember[]
  eventsAsTeamAdmin   Event[]              @relation("TeamAdminEvents")
  eventParticipations EventParticipant[]

  @@map("Users")
}

model Organization {
  id        String               @id @default(cuid())
  name      String
  slug      String               @unique
  adminId   String
  imageUrl  String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  members   OrganizationMember[]
  events    Event[]
  Post      Post[]

  @@map("Organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  memberId       String 
  member         User         @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([organizationId, memberId], name: "uniqueOrgMember")
  @@map("OrganizationMembers")
}

model Event {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  startTime           DateTime
  endTime             DateTime
  instagramId         String?
  instagramIdPassword String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  teamAdminId String
  teamAdmin   User   @relation("TeamAdminEvents", fields: [teamAdminId], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  participants EventParticipant[]

  postId String? @unique
  post   Post?

  @@unique([organizationId, title])
  @@map("Events")
}

model EventParticipant {
  id        String          @id @default(cuid())
  role      ParticipantRole @default(MEMBER)
  eventId   String
  event     Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([eventId, userId])
  @@map("EventParticipants")
}

model Post {
  id              String   @id @default(cuid())
  title           String
  hashtags        String
  description     String
  subtitle        String?
  additional      String?
  mediaUrl        String?
  isPublished     Boolean  @default(false)
  confirmByClient Boolean? @default(false)
  postType        PostType @default(POST)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  PostSchedule PostSchedule?
  orgId        String        @unique
  organization Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  eventId      String?       @unique
  event        Event?        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("Posts")
}

model PostSchedule {
  id               String           @id @default(cuid())
  postScheduleTime DateTime
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  postId           String           @unique
  post             Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  canBeScheduledBy PostScheduleRole @default(ADMIN)
}

enum GlobalRole {
  ADMIN
  CLIENT
  MEMBER
}

enum PostType {
  POST
  REEL
}

enum PostScheduleRole {
  ADMIN
  MEMBER
}

enum MembershipStatus {
  PENDING
  ACCEPTED
}

enum ParticipantRole {
  CLIENT
  MEMBER
}
