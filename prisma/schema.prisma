generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  firstName           String?
  lastName            String?
  imageUrl            String?
  role                GlobalRole           @default(ADMIN)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  organizationMembers OrganizationMember[]
  eventsAsClient      Event[]              @relation("ClientEvents")
  eventsAsTeamMember  Event[]              @relation("TeamMemberEvents")
  eventsAsTeamAdmin   Event[]              @relation("TeamAdminEvents")

  @@map("Users")
}

model Organization {
  id        String               @id @default(cuid())
  name      String
  slug      String               @unique
  adminId   String
  imageUrl  String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  members   OrganizationMember[]
  Event     Event[]

  @@map("Organizations")
}

model OrganizationMember {
  id         String           @id @default(cuid())
  role       OrgMemberRole    @default(MEMBER)
  status     MembershipStatus @default(PENDING)
  invitedAt  DateTime         @default(now())
  acceptedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  memberId       String
  member         User         @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([organizationId])
  @@map("OrganizationMembers")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  instagramId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // RELATIONS
  teamAdminId String
  teamAdmin   User   @relation("TeamAdminEvents", fields: [teamAdminId], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  clientId   String
  teamClient User   @relation("ClientEvents", fields: [clientId], references: [id], onDelete: Cascade)

  teamMemberId String
  teamMember   User   @relation("TeamMemberEvents", fields: [teamMemberId], references: [id], onDelete: Cascade)

  postId String @unique
  Post   Post?

  @@unique([organizationId, title])
  @@map("Events")
}

model Post {
  id            String    @id @default(cuid())
  postScheduled DateTime?
  eventId       String?   @unique
  event         Event?    @relation(references: [id], fields: [eventId], onDelete: Cascade)
  textContent   String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("Posts")
}

enum GlobalRole {
  ADMIN
  CLIENT
  MEMBER
}

enum OrgMemberRole {
  ADMIN
  CLIENT
  MEMBER
}

enum MembershipStatus {
  PENDING
  ACCEPTED
}
