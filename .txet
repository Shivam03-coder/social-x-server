import React, { FC, useState, useEffect, KeyboardEvent } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Instagram, Share2, X, Mail } from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { inviteMembersSchema, InviteMembersType } from "@/schema";
import { useAppToasts } from "@/hooks/use-app-toast";
import { useJoinOrgEventInvitationsMutation } from "@/store/api-endpoints/events-api";
import { isValidEmail } from "@/helpers";
import FormField from "@/components/ui/form-field";
import { useGetUserByRoleQuery } from "@/store/api-endpoints/auth-api";

interface JoinEventModalProps {
  eventName: string;
  eventId: string;
  orgId: string;
}

const InviteEventModal: FC<JoinEventModalProps> = ({
  eventName,
  orgId,
  eventId,
}) => {
  const {
    handleSubmit,
    setValue,
    watch,
    formState: { errors },
    reset,
  } = useForm<InviteMembersType>({
    resolver: zodResolver(inviteMembersSchema),
    defaultValues: {
      emails: [],
      role: "",
    },
  });

  const [open, setOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState<string>("");
  const [selectedEmails, setSelectedEmails] = useState<string[]>([]);
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const selectedRole = watch("role");
  const { data: UserByRole, isSuccess } = useGetUserByRoleQuery();
  const { ErrorToast, SuccessToast } = useAppToasts();
  const [SendInvitations, { isLoading }] = useJoinOrgEventInvitationsMutation();


  useEffect(() => {
    let filtered = suggestions.filter((email) => {
      const matchesSearch = email
        .toLowerCase()
        .includes(searchTerm.toLowerCase());
      const notSelected = !selectedEmails.includes(email);

      return matchesSearch && notSelected;
    });

    // Add dynamic email suggestion if no matches found and input is valid email
    if (
      searchTerm &&
      isValidEmail(searchTerm) &&
      !selectedEmails.includes(searchTerm) &&
      !filtered.some((email) => email === searchTerm)
    ) {
      const newEmail = {
        email: searchTerm,
      };
      filtered = [newEmail.email, ...filtered];
    }

    setSuggestions(filtered);
  }, [searchTerm, selectedRole, selectedEmails]);

  useEffect(() => {
    if (UserByRole?.result && isSuccess) {
      const membersEmails = UserByRole.result.MEMBER || [];
      const clientsEmails = UserByRole.result.CLIENT || [];
      if (selectedRole === "CLIENT") {
        setSuggestions(clientsEmails);
      } else if (selectedRole === "MEMBER") {
        setSuggestions(membersEmails);
      }
    }
  }, [selectedRole, UserByRole]);

  const handleSelectEmail = (email: string) => {
    if (!selectedEmails.includes(email)) {
      const newEmails = [...selectedEmails, email];
      setSelectedEmails(newEmails);
      setValue("emails", newEmails);
      setSearchTerm("");
    }
  };

  const handleKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {
    if (e.key === "Enter" && searchTerm && isValidEmail(searchTerm)) {
      e.preventDefault();
      if (!selectedEmails.includes(searchTerm)) {
        const newEmail = {
          email: searchTerm,
        };
        handleSelectEmail(newEmail.email);
      }
    }
  };

  const handleRemoveEmail = (email: string) => {
    const newEmails = selectedEmails.filter((e: string) => e !== email);
    setSelectedEmails(newEmails);
    setValue("emails", newEmails);
  };

  const onSubmit = async (data: InviteMembersType) => {
    try {
      const resp = await SendInvitations({
        emails: data.emails,
        role: (data.role ?? "MEMBER").toUpperCase(),
        eventId,
        orgId,
      }).unwrap();

      if (resp.status === "success") {
        SuccessToast({
          title: "Invitations sent successfully!",
          description: `Your invitees have been notified to join ${eventName}.`,
        });
        reset();
        setSelectedEmails([]);
        setSearchTerm("");
        setOpen(false);
      } else {
        ErrorToast({
          title: "Failed to send invitations",
          description: resp.message || "Something went wrong. Try again later.",
        });
      }
    } catch (error: any) {
      console.error("ðŸš¨ onSubmit error:", error);
      ErrorToast({
        title: "Error sending invitations",
        description: error?.message || "An unexpected error occurred.",
      });
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <button
          className="flex items-center justify-center rounded-full bg-purple-600 p-2 text-white transition-all hover:bg-purple-700"
          aria-label="Invite Members to Event"
        >
          <Share2 size={20} />
        </button>
      </DialogTrigger>

      <DialogContent className="rounded-3xl border-none bg-gradient-to-br from-white via-pink-50 to-purple-50 p-6 font-lexend shadow-2xl transition-all duration-300">
        <DialogHeader>
          <DialogTitle className="text-center text-xl font-bold uppercase tracking-wide text-pink-500">
            Invite Members to Join Event!
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {/* Role Field */}
          <FormField
            error={errors.role?.message}
            label="Select Role"
            className="space-y-2 text-sm font-medium text-purple-800"
          >
            <Select
              onValueChange={(val) =>
                setValue("role", val, { shouldValidate: true })
              }
              value={watch("role")}
            >
              <SelectTrigger className="rounded-xl border-2 border-purple-300 bg-purple-50 text-purple-800 transition-all duration-300 focus:border-pink-500 focus:ring-2 focus:ring-pink-400">
                <SelectValue
                  defaultValue={"MEMBER"}
                  placeholder="Choose role for invitees"
                />
              </SelectTrigger>
              <SelectContent className="rounded-xl border border-purple-300 bg-white shadow-lg">
                <SelectItem
                  value="MEMBER"
                  className="cursor-pointer hover:bg-purple-100 focus:bg-purple-200"
                >
                  Member
                </SelectItem>
                <SelectItem
                  value="CLIENT"
                  className="cursor-pointer hover:bg-pink-100 focus:bg-pink-200"
                >
                  Client
                </SelectItem>
              </SelectContent>
            </Select>
          </FormField>

          {/* Selected Emails */}
          {/* Selected Emails */}
          <div className="flex max-h-[200px] flex-wrap gap-2 overflow-y-auto p-4">
            {selectedEmails.map((email) => (
              <div
                key={email}
                className="flex items-center gap-2 rounded-full border border-purple-300 bg-gradient-to-r from-pink-100 via-purple-100 to-yellow-100 px-3 py-1 text-xs text-purple-700 shadow-sm"
              >
                <Avatar className="h-6 w-6">
                  <AvatarFallback className="bg-gradient-to-tr from-pink-400 to-yellow-300 text-xs font-semibold text-white">
                    {email.charAt(0).toUpperCase()}
                  </AvatarFallback>
                </Avatar>
                <span className="truncate">{email}</span>
                <button
                  type="button"
                  onClick={() => handleRemoveEmail(email)}
                  className="text-purple-500 transition-colors hover:text-purple-800"
                >
                  <X size={12} />
                </button>
              </div>
            ))}
          </div>

          {/* Email Search and Suggestions */}
          <div className="relative">
            <Command
              className="rounded-xl border border-gray-200 bg-white shadow-inner"
              onKeyDown={handleKeyDown}
            >
              <CommandInput
                placeholder="Search or enter email address..."
                value={searchTerm}
                onValueChange={setSearchTerm}
                className="border-none text-purple-800 placeholder-purple-400"
              />
              <CommandList>
                <CommandEmpty className="py-6 text-center text-sm text-purple-600">
                  {isValidEmail(searchTerm) ? (
                    <div className="flex items-center justify-center gap-2">
                      <Mail className="text-purple-500" size={16} />
                      <span>Press enter to add {searchTerm}</span>
                    </div>
                  ) : (
                    "Start typing an email address..."
                  )}
                </CommandEmpty>
                <CommandGroup>
                  {suggestions.map((email, i) => (
                    <CommandItem
                      key={`${email}-${i}`}
                      onSelect={() => handleSelectEmail(email)}
                      className="flex cursor-pointer items-center gap-2 p-2 hover:bg-purple-50"
                    >
                      <Avatar className="h-8 w-8">
                        {/* No AvatarImage because you have no avatar URLs */}
                        <AvatarFallback className="bg-pink-500">
                          {email.charAt(0).toUpperCase()}
                        </AvatarFallback>
                      </Avatar>

                      <div className="flex flex-col">
                        <span className="font-medium text-purple-800">
                          {email.split("@")[0]}{" "}
                        </span>
                        <span className="text-sm text-purple-600">{email}</span>
                      </div>

                      <span className="ml-auto text-xs capitalize text-purple-500">
                        {selectedRole || "member"}
                      </span>
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </div>

          {/* Submit Button */}
          <Button
            type="submit"
            disabled={isLoading || selectedEmails.length === 0}
            className="w-full rounded-xl bg-gradient-to-r from-pink-500 via-purple-500 to-indigo-500 py-3 text-lg text-white shadow-lg transition-transform duration-300 hover:scale-105 disabled:cursor-not-allowed disabled:opacity-50"
          >
            {isLoading ? "Sending Invitations..." : "Send Invitations"}
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default InviteEventModal;
